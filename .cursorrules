# Ayaan Javed Portfolio - Project Context

## Project Overview

This is a personal portfolio website for Ayaan Javed, built with Next.js 15, React 19, TypeScript, and Tailwind CSS. The site showcases skills as a Software Engineer, Musician, and Traveller.

## Personal Context & Goals

### Background

- **Current Role**: Android Developer
- **Transition Goal**: General Software Developer (targeting Google, Meta, other FAANG companies)
- **Timeline**: Few months to prepare for interviews
- **Project Purpose**:
  - Learn and internalize general software development concepts
  - Build a comprehensive portfolio showcasing technical understanding
  - Demonstrate full-stack capabilities beyond mobile development

### Technical Transition Focus

- **From**: Android development (Java/Kotlin, mobile-specific patterns)
- **To**: Full-stack web development (React, TypeScript, modern web patterns)
- **Learning Objectives**:
  - Modern JavaScript/TypeScript ecosystem
  - React patterns and best practices
  - Web performance and optimization
  - System design principles
  - Interview-relevant algorithms and data structures

### Portfolio Strategy

- **Target Audience**: FAANG recruiters and hiring managers
- **Key Messages**:
  - Demonstrates ability to learn new technologies quickly
  - Shows full-stack development capabilities
  - Highlights problem-solving and system design skills
  - Proves adaptability from mobile to web development

### Communication Preferences

- **Explanations**: Detailed with "why" behind decisions (interview prep)
- **Complexity**: Build up gradually, explain advanced concepts
- **Focus**: Interview-relevant patterns and best practices
- **Code Quality**: Production-ready, scalable, maintainable code

### Learning Strategy & Depth Management

- **Priority**: Focus on concepts that demonstrate general software engineering skills
- **Depth Decision**: Balance between understanding vs. interview relevance
- **Animation/UI**: Understand the concept and implementation approach, but don't dive too deep into complex animations
- **Core Focus**:
  - Component architecture and patterns
  - State management and data flow
  - Performance optimization principles
  - Code organization and maintainability
- **Time Investment**: Prioritize concepts that transfer to backend/system design interviews
- **Interview Strategy**: Be able to explain "what" and "why" without getting lost in "how" details

### Proactive Depth Management Rule

- **When to Intervene**: If Ayaan starts diving deep into low-value areas (CSS tweaking, animation minutiae, implementation details)
- **Intervention Phrase**: "Hey, I think you're going too deep into this, and it doesn't have a high return value for interviews"
- **Low-Value Areas**:
  - Fine-tuning CSS properties (padding, margins, exact pixel values)
  - Complex animation implementation details
  - Browser-specific optimizations
  - Minor UI polish that doesn't demonstrate engineering skills
- **High-Value Areas**:
  - Component architecture decisions
  - State management patterns
  - Performance optimization strategies
  - Code organization and maintainability
  - System design principles
- **Implementation Strategy**: Handle low-value implementation details for Ayaan, skip detailed explanations of those changes

### Technical Preferences & Interview Standards

- **Code Quality Focus**: Production-ready, maintainable code that demonstrates engineering maturity
- **TypeScript**: Use strict mode to show attention to type safety and code reliability
- **Component Architecture**: Follow React best practices (separation of concerns, reusability, prop interfaces)
- **Performance**: Implement basic optimizations (memoization, lazy loading) to show performance awareness
- **Error Handling**: Include proper error boundaries and graceful degradation
- **Accessibility**: Basic a11y practices to show inclusive design thinking
- **Code Organization**: Clear file structure and naming conventions that demonstrate systematic thinking
- **Documentation**: Inline comments for complex logic, README for setup instructions
- **Git Practices**: Meaningful commit messages, logical commit structure

### Interview-Relevant Technical Standards

- **Scalability**: Design components that can handle growth (props for customization, modular structure)
- **Maintainability**: Clean, readable code that other engineers can understand and modify
- **Testing Readiness**: Structure code to be easily testable (pure functions, dependency injection)
- **Performance Awareness**: Understand and implement basic optimization patterns
- **Security Basics**: Follow web security best practices (input validation, XSS prevention)

### Design Philosophy

- **Status**: To be refined along the way
- **Current Priority**: Fix responsive design issues
- **Current State**: Desktop-only, breaks on mobile devices
- **Future**: Will establish design principles and inspirations as project evolves

### Performance Goals & Interview Relevance

- **Core Web Vitals**: Achieve good scores to demonstrate performance awareness
- **Page Load Speed**: < 3 seconds to show optimization skills
- **Bundle Optimization**: Demonstrate understanding of code splitting and lazy loading
- **Image Optimization**: Show knowledge of modern image formats and loading strategies
- **SEO Basics**: Implement proper meta tags and structured data for discoverability
- **Interview Talking Points**: Be able to discuss performance optimization strategies
- **Performance Monitoring**: Understand how to measure and improve web performance
- **Mobile Performance**: Ensure fast loading on mobile devices (interviewers often check on phones)

### Deployment Setup

- **Method**: Manual FTP deployment
- **Build Process**: Next.js static export
- **Server**: FTP server (details to be added when needed)
- **Domain**: To be configured
- **Notes**: Manual deployment process, will document specific steps when deploying
- **Deployment Steps**:
  1. Run `npm run build` to create static export in `out/` directory
  2. Compress `out/` directory: `powershell Compress-Archive -Path .\out\* -DestinationPath .\out.zip -Force`
  3. Upload `out.zip` to FTP server at `/public_html`
  4. Extract and override contents on server
  5. Verify deployment by visiting domain

## Tech Stack

- **Framework**: Next.js 15 with App Router
- **Frontend**: React 19, TypeScript
- **Styling**: Tailwind CSS
- **Fonts**: Inter (sans-serif), Playfair Display (serif)
- **Animation**: react-simple-typewriter for typing effects
- **Icons**: SVG icons for orbit animation

## Project Structure

```
src/app/
├── layout.tsx          # Main layout with metadata and fonts
├── page.tsx           # Home page
├── fonts.ts           # Font configurations
├── globals.css        # Global styles
└── components/
    ├── Navbar.tsx     # Navigation bar
    ├── HeroSection.tsx # Main hero section wrapper
    ├── HeroContent.tsx # Hero content with typing animation
    └── OrbitAnimation.tsx # Orbiting icons animation
```

## Key Components

### Layout (layout.tsx)

- Contains SEO metadata (title, description, Open Graph)
- Configures Inter and Playfair Display fonts
- Wraps all pages with Navbar and global styling
- Uses dark theme with custom color variables

### HeroSection

- Main landing section with profile introduction
- Contains HeroContent (text) and OrbitAnimation (visual)
- Responsive design with mobile-first approach

### OrbitAnimation

- Features 6 icons orbiting around center point
- Each icon has different orbit radius, speed, and direction
- Includes glow effects and hover animations
- Icons: File, Globe, Window, and custom SVGs

### HeroContent

- Displays name, title, and description
- Uses react-simple-typewriter for typing animation
- Responsive text sizing

## Design System

- **Colors**: Dark theme with custom CSS variables
- **Typography**: Inter for body text, Playfair for headings
- **Spacing**: Tailwind utility classes
- **Animations**: CSS transforms and transitions

## Development Guidelines

- Use TypeScript for all components
- Follow Next.js 15 App Router conventions
- Maintain responsive design principles
- Keep components modular and reusable
- Use semantic HTML and accessibility best practices

## Current Features

- Responsive navigation
- Hero section with typing animation
- Orbiting icon animation
- SEO optimization
- Dark theme design
- Mobile-friendly layout

## Future Enhancement Ideas

- Add more sections (About, Projects, Contact)
- Implement smooth scrolling
- Add more interactive animations
- Include project showcase
- Add contact form
- Implement blog functionality

## Important Notes

- Profile image: ayaan_cutout.png in public folder
- Custom SVG icons for orbit animation
- Fonts loaded via Next.js font optimization
- Uses Turbopack for development
